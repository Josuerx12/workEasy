// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id        String  @id
  avatarId  String?
  email     String  @unique
  name      String
  password  String
  admin     Boolean @default(false)
  moderator Boolean @default(false)
  support   Boolean @default(true)

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt()
  deletedAt        DateTime?
  avatar           avatar?            @relation(fields: [avatarId], references: [id])
  companyUser      companyUser[]
  companyRequester companyRequester[]
  company          company[]
}

model company {
  id           String  @id
  avatarId     String?
  userId       String  @unique
  addressId    String?
  name         String
  documentType String
  document     String  @unique
  email        String  @unique
  phone        String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt()
  deletedAt DateTime?

  avatar  avatar?  @relation(fields: [avatarId], references: [id])
  address address? @relation(fields: [addressId], references: [id])
  user    user     @relation(fields: [userId], references: [id])

  companyUser         companyUser[]
  companyRequester    companyRequester[]
  companyTaskCategory companyTaskCategory[]
  companyClient       companyClient[]

  @@unique([document, email])
  @@map("companies")
}

model companyUser {
  id        String @id
  companyId String
  userId    String
  lat       String
  long      String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt()
  deletedAt DateTime?

  user            user              @relation(fields: [userId], references: [id])
  company         company           @relation(fields: [companyId], references: [id])
  companyUserRole companyUserRole[]
  task            task[]

  @@unique([companyId, userId])
}

model companyRequester {
  id        String  @id
  companyId String
  userId    String
  task      task[]
  user      user    @relation(fields: [userId], references: [id])
  company   company @relation(fields: [companyId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt()
  deletedAt DateTime?

  @@unique([companyId, userId])
}

model companyUserRole {
  id            String @id
  companyUserId String
  roleId        String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt()
  deletedAt DateTime?

  companyUser companyUser @relation(fields: [companyUserId], references: [id])
  role        role        @relation(fields: [roleId], references: [id])

  @@unique([roleId, companyUserId])
}

model role {
  id          String @id
  name        String
  description String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt()
  deletedAt DateTime?

  companyUserRole companyUserRole[]
}

model companyTaskCategory {
  id          String  @id
  companyId   String
  title       String
  description String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt()
  deletedAt DateTime?
  company   company   @relation(fields: [companyId], references: [id])
  task      task[]
}

model avatar {
  id   String @id
  path String
  url  String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt()
  deletedAt DateTime?
  company   company[]
  user      user[]
}

model evidence {
  id   String @id
  path String
  url  String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt()
  deletedAt DateTime?

  taskId String
  task   task   @relation(fields: [taskId], references: [id])
}

model task {
  id                    String     @id
  companyRequesterId    String
  companyTaskCategoryId String
  companyUserId         String?
  status                String     @default("created")
  title                 String
  description           String
  evidences             evidence[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt()
  deletedAt DateTime?

  companyUser         companyUser?        @relation(fields: [companyUserId], references: [id])
  companyTaskCategory companyTaskCategory @relation(fields: [companyTaskCategoryId], references: [id])
  companyRequester    companyRequester    @relation(fields: [companyRequesterId], references: [id])
}

model address {
  id String @id

  street       String
  neighborhood String
  number       String
  city         String
  state        String
  cep          String

  lat           String?
  long          String?
  companyClient companyClient[]
  company       company[]
}

model companyClient {
  id           String @id
  companyId    String
  addressId    String
  name         String
  phone        String
  documentType String
  document     String

  company company @relation(fields: [companyId], references: [id])
  address address @relation(fields: [addressId], references: [id])

  @@unique([companyId, document])
}
